
Automation framework



public static <T> T getObject(File fileObject, Class<T> cls) {
  try {
    ObjectMapper objectMapper = new ObjectMapper();
    return objectMapper.readValue(fileObject, cls);
  } catch (Throwable var3) {
    throw var3;
  }
}


config



BaseEnvConfig




@Getter
@JsonIgnoreProperties(ignoreUnknown = true)
@Slf4j
public class BaseEnvConfig {

    private String envToExecute;
    private int maxRetries = 2;

    private static BaseEnvConfig instance;

    private BaseEnvConfig() {}
    private BaseEnvConfig(String envToExecute) {
        this.envToExecute = envToExecute;
    }

    public static BaseEnvConfig getInstance() {

        if (instance == null ) {

            String envFilePath = "src/test/resources/env-Config.json";

            if(!Files.exists(Path.of(envFilePath))) {
                throw new RuntimeException("src/test/resources/env-Config.json is NOT available.");
            }

            updateEnvConfig(envFilePath);

            BaseEnvConfig baseEnvConfig = CommonUtil.getObject(new File(envFilePath), BaseEnvConfig.class);
            instance = new BaseEnvConfig(baseEnvConfig.getEnvToExecute());
        }

        return instance;
    }

listeners
testSetupListener

model


appResponse
		


@Data
public class AppResponse {

    private String data;
    private Map<String,Object> headers;
    private Integer httpStatusCode;

}

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
@EqualsAndHashCode(exclude = {"jiraRef"})
public class TestMethodData {

    private String packageName;
    private String testClass;
    private String method;
    private String canExecute;
    private String jiraRef;
}



utils
apiautologger


@Slf4j
public class ApiAutomationLogger {

    public static void log(String logStatement) {

        // Get the stack trace
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();

        // The 0th element is the getStackTrace method itself, and the 1st element is the method that called it
        if (stackTrace.length >= 3) {
            StackTraceElement caller = stackTrace[2];
            String callerClassName = caller.getClassName();
            String callerMethodName = caller.getMethodName();
            logger.info(callerClassName+"."+callerMethodName + "--" +logStatement);
        }
        else {
            logger.info(logStatement);
        }
        Reporter.log(logStatement);
    }

}

Apiexeutil


public class ApiExecuteUtil {
  public ApiExecuteUtil() {
  }

  public static AppResponse get(String endPoint) {
    return get(endPoint, new HashMap(), new HashMap());
  }

  public static AppResponse get(String endPoint, Map<String, Object> headers) {
    return get(endPoint, headers, new HashMap());
  }

  public static AppResponse get(String endPoint, Map<String, Object> headers, Map<String, Object> queryParams, boolean... isLogResponse) {
    if (toLogResponse(isLogResponse)) {
      ApiAutomationLogger.log("EndPoint :: " + endPoint);
      ApiAutomationLogger.log("Headers :: " + headers);
      ApiAutomationLogger.log("QueryParam :: " + queryParams);
    }

    Response response = (Response)((ValidatableResponse)((Response)requestSpecification().headers(headers).queryParams(queryParams).when().get(endPoint, new Object[0])).then()).extract().response();
    TestSetupListener.updateApiVsTestsMap(endPoint, "GET");
    return CommonUtil.mapResponse(response);
  }

  public static AppResponse post(String endPoint, String requestBody) {
    return post(endPoint, (Map)(new HashMap()), (String)requestBody, (boolean[])());
  }

  public static AppResponse post(String endPoint, Map<String, Object> headers, String requestBody, boolean... isLogResponse) {
    if (toLogResponse(isLogResponse)) {
      ApiAutomationLogger.log("POST :: " + endPoint);
      ApiAutomationLogger.log("Headers :: " + headers);
      ApiAutomationLogger.log("Request-Body :: " + requestBody);
    }

    Response response = (Response)((ValidatableResponse)((Response)requestSpecification().headers(headers).and().body(requestBody).when().post(endPoint, new Object[0])).then()).extract().response();
    TestSetupListener.updateApiVsTestsMap(endPoint, "POST");
    return CommonUtil.mapResponse(response);
  }
	

private static RequestSpecification requestSpecification() {
  return RestAssured.given().contentType(ContentType.JSON).relaxedHTTPSValidation();
}

private static RequestSpecification requestSpecificationWithBasicAuth(String userName, String password) {
  return RestAssured.given().auth().basic(userName, password).contentType(ContentType.JSON).relaxedHTTPSValidation();
}

private static RequestSpecification requestSpecificationWithBasicAuthAndPreemptive(String userName, String password) {
  return RestAssured.given().auth().preemptive().basic(userName, password).contentType(ContentType.URLENC).relaxedHTTPSValidation();
}

private static RequestSpecification requestSpecificationWithOuAuth2(String accessToken) {
  return RestAssured.given().auth().oauth2(accessToken).contentType(ContentType.JSON).relaxedHTTPSValidation();
}

private static RequestSpecification requestSpecificationWithEncoding(String encodingType) {
  return RestAssured.given().config(RestAssuredConfig.config().encoderConfig((new EncoderConfig()).encodeContentTypeAs(encodingType, ContentType.JSON)));
}


public class AssertionUtil {

    public static void assertEquals(String message, Object expected, Object actual) {

        ApiAutomationLogger.log("Expected  :: " + expected);
        ApiAutomationLogger.log("Actual  :: " + actual);
        Assert.assertEquals(actual, expected, message);
    }

comonuti


public class CommonUtil {

    public static AppResponse mapResponse(Response response) {

        AppResponse appResponse = new AppResponse();
        appResponse.setData(response.getBody().asString());
        appResponse.setHeaders(
                response.getHeaders().asList().stream()
                        .collect(Collectors.toMap(
                                Header::getName,
                                Header::getValue,
                                (existingValue, newValue) -> existingValue,
                                LinkedHashMap::new
                        ))
        );
        appResponse.setHttpStatusCode(response.getStatusCode());
        return appResponse;
    }

    @SneakyThrows
    public static <T> T getObject(String jsonString, Class<T> cls) {

        ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.readValue(jsonString, cls);
    }

    @SneakyThrows
    public static <T> List<T> getObjects(String jsonString, Class<T> cls) {

        ObjectMapper objectMapper = new ObjectMapper();

        return objectMapper.readValue(jsonString,
                TypeFactory.defaultInstance().constructCollectionType(List.class, cls));
    }

    @SneakyThrows
    public static <T> String getJson(T t) {

        return new ObjectMapper().writeValueAsString(t);
    }

    @SneakyThrows
    public static <T> T getObject(File fileObject, Class<T> cls) {

        ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.readValue(fileObject, cls);
    }

