

---

### ‚úÖ 1. Positive Test Cases

| Test Case ID | Description                                                                                                                                  |
| ------------ | -------------------------------------------------------------------------------------------------------------------------------------------- |
| TC\_POS\_01  | Select all valid radio options (Yes/No), checkboxes (Sterling/Euro), and enter valid text for BIC, NCC, Settlement Account, Sort Code ranges |
| TC\_POS\_02  | Fill all mandatory fields for a Financial Institution (FI = Yes) and successfully submit                                                     |
| TC\_POS\_03  | Fill all required fields when FI = No (bypassing FI-specific fields)                                                                         |
| TC\_POS\_04  | Add multiple (‚â§10) lower-upper sort code ranges and verify all save correctly                                                                |
| TC\_POS\_05  | Submit with optional fields left empty (where allowed) and verify successful save                                                            |
| TC\_POS\_06  | "Auto reject for missed cut-off" = Yes ‚Üí ensure the option is saved correctly                                                                |
| TC\_POS\_07  | Save and resume progress ‚Äì ensure data persistence                                                                                           |

---

### ‚ùå 2. Negative Test Cases

| Test Case ID | Description                                                                 |
| ------------ | --------------------------------------------------------------------------- |
| TC\_NEG\_01  | Leave required fields blank ‚Üí verify inline validation                      |
| TC\_NEG\_02  | Settlement Account number <14 or >14 digits                                 |
| TC\_NEG\_03  | Invalid BIC format (e.g., incorrect length, special characters)             |
| TC\_NEG\_04  | Invalid sort code (non-numeric or incorrect length)                         |
| TC\_NEG\_05  | Add more than 10 sort code range blocks                                     |
| TC\_NEG\_06  | Enter text in numeric-only fields (e.g., account number)                    |
| TC\_NEG\_07  | Set conflicting radio buttons (e.g., both "Yes" and "No" via JS) and submit |

---

### ‚ö†Ô∏è 3. Error Handling Requirements

#### ‚úÖ Client-Side Validations:

* **BIC**: Must be 8 or 11 alphanumeric characters; validated against format
* **Settlement Account**: 14-digit numeric only
* **Sort Codes**: 6-digit numeric
* **Radio/Checkbox**: At least one must be selected where required
* **Required Fields**: All mandatory fields should be validated before submission

#### ‚ö†Ô∏è Error Messages Should Be:

* **Specific**: e.g., `"Settlement account must be exactly 14 digits"`
* **User-friendly**: Avoid technical jargon
* **Real-time (if possible)**: Display on blur or input

---

### üåê 4. Global API Error Handling (Backend Responses)

| Scenario                    | Expected Handling                                                                    |
| --------------------------- | ------------------------------------------------------------------------------------ |
| `400 Bad Request`           | Show message: *"Submission contains invalid data. Please check highlighted fields."* |
| `401 Unauthorized`          | Redirect to login or show *"Session expired. Please login again."*                   |
| `403 Forbidden`             | Show *"You do not have permission to perform this action."*                          |
| `404 Not Found`             | Show *"Server could not locate resource. Contact support."*                          |
| `500 Internal Server Error` | Show fallback message: *"Something went wrong. Please try again later."*             |
| Timeout/Error               | Retry logic with fallback message: *"Request timed out. Please retry."*              |

---

### üß™ 5. Edge Case Scenarios

| Case                 | Test                                                              |
| -------------------- | ----------------------------------------------------------------- |
| Max fields added     | Add 10 sort code ranges (max allowed) and ensure data is retained |
| Whitespace in fields | Try leading/trailing spaces in BIC, NCC ‚Äì should auto-trim        |
| Special characters   | Inputs like `<script>` should be escaped or rejected              |
| Resubmission         | Try submitting twice ‚Äì ensure no duplication                      |
| Case sensitivity     | Check if BICs/NCCs are case-sensitive or normalized               |
| Session expiry       | Mid-form expiry ‚Üí should alert user and save progress locally     |

---

### üîê 6. OWASP & Broken Authentication/Access Tests

| Issue                      | Check                                                                     |
| -------------------------- | ------------------------------------------------------------------------- |
| Broken Authentication      | Ensure login is required to access form                                   |
| Cross-Site Scripting (XSS) | Input like `<script>alert()</script>` must be escaped server-side         |
| CSRF                       | Check for CSRF tokens in POST requests                                    |
| Broken Access Control      | Logged in user should not access or edit other customer data              |
| Sensitive Data Exposure    | Passwords, account numbers not visible in console/network logs            |
| Rate Limiting              | API endpoint should rate-limit frequent submissions                       |
| Secure Headers             | HTTP responses should include `X-Frame-Options`, `X-XSS-Protection`, etc. |
| No GET over sensitive data | Ensure sensitive data is never passed via query parameters                |

---




:

---

### ‚úÖ **Folder & File Structure**

```
cypress-bdd-framework/
‚îÇ
‚îú‚îÄ‚îÄ cypress/
‚îÇ   ‚îú‚îÄ‚îÄ e2e/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ customer-settings.feature
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ step_definitions/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ customerSettings.steps.js
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CustomerSettingsPage.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ FinancialInfoPage.js
‚îÇ   ‚îî‚îÄ‚îÄ support/
‚îÇ       ‚îú‚îÄ‚îÄ commands.js
‚îÇ       ‚îî‚îÄ‚îÄ e2e.js
‚îÇ
‚îú‚îÄ‚îÄ plugins/
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ
‚îú‚îÄ‚îÄ cypress.config.js
‚îú‚îÄ‚îÄ environment.js
‚îî‚îÄ‚îÄ package.json
```

---

### ‚öôÔ∏è **Key Elements**

#### 1. **environment.js**

```js
module.exports = {
  baseUrl: "https://your-bankingapp.com",
  timeout: 10000
};
```

#### 2. **cypress.config.js**

```js
const env = require('./environment');

module.exports = {
  e2e: {
    baseUrl: env.baseUrl,
    supportFile: 'cypress/support/e2e.js',
    setupNodeEvents(on, config) {
      return config;
    },
  },
};
```

#### 3. **Page Object: CustomerSettingsPage.js**

```js
class CustomerSettingsPage {
  elements = {
    financialTransfersYes: () => cy.get('[name="financialTransfers"][value="Yes"]'),
    financialTransfersNo: () => cy.get('[name="financialTransfers"][value="No"]'),
    sterlingCheckbox: () => cy.get('[name="sterling"]'),
    euroCheckbox: () => cy.get('[name="euro"]'),
    saveButton: () => cy.contains('Save progress'),
  };

  selectFinancialTransfer(option) {
    this.elements[`financialTransfers${option}`]().check({ force: true });
  }

  selectCurrency(currency) {
    this.elements[`${currency.toLowerCase()}Checkbox`]().check({ force: true });
  }

  saveProgress() {
    this.elements.saveButton().click();
  }
}

module.exports = new CustomerSettingsPage();
```

#### 4. **Feature File: customer-settings.feature**

```gherkin
Feature: Customer Settings Form

  Scenario Outline: Fill out form with valid details
    Given I visit the customer settings page
    When I select financial transfer as "<transfer>"
    And I select settlement currency "<currency>"
    Then I save the progress

    Examples:
      | transfer | currency |
      | Yes      | Sterling |
      | No       | Euro     |
```

#### 5. **Step Definition: customerSettings.steps.js**

```js
const customerSettings = require('../../pages/CustomerSettingsPage');

Given('I visit the customer settings page', () => {
  cy.visit('/customer-settings');
});

When('I select financial transfer as {string}', (option) => {
  customerSettings.selectFinancialTransfer(option);
});

When('I select settlement currency {string}', (currency) => {
  customerSettings.selectCurrency(currency);
});

Then('I save the progress', () => {
  customerSettings.saveProgress();
});
```

#### 6. **Browser Launch (in `commands.js`)**

```js
Cypress.Commands.add("launchApp", () => {
  cy.visit('/');
});
```

---

